From 1e5a4723a0d938c1f5268dfacdc357665f063583 Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <wuzhangjin@gmail.com>
Date: Sun, 29 Dec 2019 03:19:35 +0800
Subject: [PATCH 2/2] v2.6.12: i386: temporarily skip the bad_range() BUGs

With these changes, it does boot normally.

FIXME: this must be fixed up eventually.

Signed-off-by: Wu Zhangjin <wuzhangjin@gmail.com>
---
 mm/page_alloc.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index b1061b1..d2672435 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -283,7 +283,7 @@ static inline void __free_pages_bulk (struct page *page,
 	page_idx = page_to_pfn(page) & ((1 << MAX_ORDER) - 1);
 
 	BUG_ON(page_idx & (order_size - 1));
-	BUG_ON(bad_range(zone, page));
+	//BUG_ON(bad_range(zone, page));
 
 	zone->free_pages += order_size;
 	while (order < MAX_ORDER-1) {
@@ -410,7 +410,7 @@ expand(struct zone *zone, struct page *page,
 		area--;
 		high--;
 		size >>= 1;
-		BUG_ON(bad_range(zone, &page[size]));
+		//BUG_ON(bad_range(zone, &page[size]));
 		list_add(&page[size].lru, &area->free_list);
 		area->nr_free++;
 		set_page_order(&page[size], high);
@@ -680,7 +680,7 @@ buffered_rmqueue(struct zone *zone, int order, unsigned int __nocast gfp_flags)
 	}
 
 	if (page != NULL) {
-		BUG_ON(bad_range(zone, page));
+		//BUG_ON(bad_range(zone, page));
 		mod_page_state_zone(zone, pgalloc, 1 << order);
 		prep_new_page(page, order);
 
-- 
2.7.4

